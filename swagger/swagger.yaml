openapi: 3.0.0
info:
  title: Task Management API
  version: 1.0.0
  description: API for managing tasks
servers:
  - url: http://localhost:5000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Task:
      type: object
      properties:
        title:
          type: string
          example: "Task Title"
        description:
          type: string
          example: "Task Description"
        priority:
          type: string
          enum: [high, medium, low]
          example: "high"
        assignedTo:
          type: string
          example: "8"
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "user123"
        password:
          type: string
          example: "hashedpassword"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        token:
          type: string
          example: "jwt.token.here"
    Error:
      type: object
      properties:
        status:
          type: string
          example: "fail"
        message:
          type: string
          example: "Error message"

paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user123"
                password:
                  type: string
                  example: "password123"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user123"
                password:
                  type: string
                  example: "password123"
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "jwt.token.here"
        400:
          description: Email and password are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks:
    get:
      summary: Get tasks
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of tasks per page
        - in: query
          name: priority
          schema:
            type: string
            enum: [high, medium, low]
          description: Filter by priority
        - in: query
          name: search
          schema:
            type: string
          description: Search term
        - in: query
          name: sort
          schema:
            type: string
          description: Sort field
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  page:
                    type: integer
                    example: 1
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          $ref: '#/components/schemas/Task'
                      total:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 2
                      hasMore:
                        type: boolean
                        example: true
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create task
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        201:
          description: Task created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Task'
        400:
          description: Invalid task properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{id}:
    get:
      summary: Get task by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Task ID
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Task'
        404:
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Task'
        400:
          description: Invalid task properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Task ID
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Task'
        404:
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/tasks:
    get:
      summary: Get tasks assigned to a specific user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of tasks per page
        - in: query
          name: priority
          schema:
            type: string
            enum: [high, medium, low]
          description: Filter by priority
        - in: query
          name: search
          schema:
            type: string
          description: Search term
        - in: query
          name: sort
          schema:
            type: string
          description: Sort field
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  page:
                    type: integer
                    example: 1
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          $ref: '#/components/schemas/Task'
                      total:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 2
                      hasMore:
                        type: boolean
                        example: true
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'